{"version":3,"sources":["reducer.js","actions.js","Provider.js","container/Siderbar.js","plugins/prism-plugin.js","container/MyEditor.js","container/MyHeader.js","container/App.js","Root.js","serviceWorker.js","index.js","container/App.module.css","services/github.js"],"names":["initialState","gists","selected","editorState","EditorState","createEmpty","github","JSON","parse","localStorage","getItem","reducer","state","action","type","Object","objectSpread","payload","file","createWithContent","convertFromRaw","markdownToDraft","content","map","gist","files","filename","stateCtx","createContext","dispatchCtx","Provider","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","react_default","a","createElement","value","useDispatch","useContext","useGlobalState","property","Sider","Layout","SubMenu","Menu","Sidebar","_useState","useState","_useState2","collapsed","setCollapsed","gh","onClick","asyncToGenerator","regenerator_default","mark","_callee","gistId","wrap","_context","prev","next","getGist","sent","stop","this","_x","_x2","apply","arguments","collapsible","onCollapse","menu","theme","defaultSelectedKeys","mode","key","id","title","icon","name","Item","prismPlugin","options","decorators","PrismDecorator","prism","Prism","getSyntax","block","language","getData","get","languages","render","className","concat","plugins","createPrismPlugin","createMarkdownPlugin","renderLanguageSelect","blockStyleFn","contentBlock","getType","MyEditor","onChange","useCallback","draft_js_plugins_editor_lib_default","FormItem","Form","create","form","getFieldDecorator","es_form","layout","onSubmit","e","preventDefault","validateFields","err","values","console","log","initialValue","url","input","placeholder","user","token","autoComplete","es_button","htmlType","Header","Content","Footer","App","useEffect","getGists","loadGists","styles","Siderbar","header","container_MyHeader","headerContent","container_MyEditor","footer","href","target","Root","Provider_Provider","container_App","Boolean","window","location","hostname","match","ReactDOM","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","getHeaders","headers","Headers","append","Buffer","from","toString","_Users_gmiranda_git_guilst_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_gmiranda_git_guilst_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","abrupt","fetch","method","response","json","description","_ref2","_callee2","_context2","_x3"],"mappings":"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","file":"static/js/main.7b125c5e.chunk.js","sourcesContent":["import { EditorState, convertFromRaw } from 'draft-js'\nimport { markdownToDraft } from 'markdown-draft-js'\nimport {\n  GISTS_SET,\n  FILE_SELECT,\n  FILES_UPDATE,\n  EDITOR_CHANGE,\n  GITHUB_SET,\n} from './actions'\n\nexport const initialState = {\n  gists: [],\n  selected: null,\n  editorState: EditorState.createEmpty(),\n  github: JSON.parse(localStorage.getItem('github')),\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case GISTS_SET:\n      return {\n        ...state,\n        gists: action.payload.gists,\n      }\n    case FILE_SELECT:\n      return {\n        ...state,\n        selected: action.payload.file,\n        editorState: EditorState.createWithContent(\n          convertFromRaw(markdownToDraft(action.payload.file.content))\n        ),\n      }\n    case FILES_UPDATE:\n      return {\n        ...state,\n        gists: state.gists.map(gist => ({\n          ...gist,\n          files: gist.files.map(file => ({\n            ...file,\n            content: action.payload.files[file.filename],\n          })),\n        })),\n      }\n    case EDITOR_CHANGE:\n      return {\n        ...state,\n        editorState: action.payload.editorState,\n      }\n\n    case GITHUB_SET:\n      return {\n        ...state,\n        github: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","export const GISTS_SET = 'GISTS_SET'\nexport const FILE_SELECT = 'FILE_SELECT'\nexport const FILES_UPDATE = 'FILES_UPDATE'\nexport const EDITOR_CHANGE = 'EDITOR_CHANGE'\nexport const GITHUB_SET = 'GITHUB_SET'\n","import React, { createContext, useReducer, useContext } from 'react'\nimport { initialState, reducer } from './reducer'\n\nconst stateCtx = createContext(initialState)\nconst dispatchCtx = createContext(() => 0)\n\nexport const Provider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return (\n    <dispatchCtx.Provider value={dispatch}>\n      <stateCtx.Provider value={state}>{children}</stateCtx.Provider>\n    </dispatchCtx.Provider>\n  )\n}\n\nexport const useDispatch = () => useContext(dispatchCtx)\n\nexport const useGlobalState = property => {\n  const state = useContext(stateCtx)\n  return state[property]\n}\n","import React, { useState } from 'react'\nimport { Layout, Menu, Icon } from 'antd'\nimport { getGist } from '../services/github'\nimport { useGlobalState, useDispatch } from '../Provider'\nimport { FILES_UPDATE, FILE_SELECT } from '../actions'\n\nconst { Sider } = Layout\nconst SubMenu = Menu.SubMenu\n\nconst Sidebar = () => {\n  const [collapsed, setCollapsed] = useState(false)\n  const gh = useGlobalState('github')\n  const gists = useGlobalState('gists')\n  const dispatch = useDispatch()\n\n  const onClick = async (gistId, file) => {\n    const files = await getGist(gh, gistId)\n    dispatch({ type: FILE_SELECT, payload: { file: files[file.filename] } })\n    dispatch({ type: FILES_UPDATE, payload: { files } })\n  }\n\n  return (\n    <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n      <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n        {gists.map(gist => (\n          <SubMenu\n            key={gist.id}\n            title={\n              <span>\n                <Icon type=\"snippets\" />\n                <span>{gist.name}</span>\n              </span>\n            }\n          >\n            {gist.files.map(file => (\n              <Menu.Item\n                key={file.filename}\n                onClick={() => onClick(gist.id, file)}\n              >\n                {file.filename}\n              </Menu.Item>\n            ))}\n          </SubMenu>\n        ))}\n      </Menu>\n    </Sider>\n  )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport Prism from 'prismjs'\nimport PrismDecorator from 'draft-js-prism'\nimport 'prismjs/components/prism-java'\nimport 'prismjs/components/prism-scala'\nimport 'prismjs/components/prism-go'\nimport 'prismjs/components/prism-sql'\nimport 'prismjs/components/prism-bash'\nimport 'prismjs/components/prism-c'\nimport 'prismjs/components/prism-cpp'\nimport 'prismjs/components/prism-kotlin'\nimport 'prismjs/components/prism-perl'\nimport 'prismjs/components/prism-ruby'\nimport 'prismjs/components/prism-swift'\nimport 'prismjs/themes/prism.css'\n\nconst prismPlugin = options => {\n  return {\n    decorators: [\n      new PrismDecorator({\n        prism: Prism,\n        getSyntax(block) {\n          const language = block.getData().get('language')\n          if (typeof Prism.languages[language] === 'object') {\n            return language\n          }\n          return null\n        },\n        render({ type, children }) {\n          return <span className={`prism-token token ${type}`}>{children}</span>\n        },\n      }),\n    ],\n  }\n}\n\nexport default prismPlugin\n","import React, { useCallback } from 'react'\nimport Editor from 'draft-js-plugins-editor'\nimport createMarkdownPlugin from 'draft-js-markdown-plugin'\nimport createPrismPlugin from '../plugins/prism-plugin'\nimport { useDispatch, useGlobalState } from '../Provider'\nimport { EDITOR_CHANGE } from '../actions'\nimport './DraftJS.css'\n\nconst plugins = [\n  createPrismPlugin(),\n  createMarkdownPlugin({ renderLanguageSelect: () => null }),\n]\nconst blockStyleFn = contentBlock => {\n  if (contentBlock.getType() === 'code-block') {\n    return 'block-code'\n  }\n}\n\nconst MyEditor = () => {\n  const editorState = useGlobalState('editorState')\n  const dispatch = useDispatch()\n  const onChange = useCallback(editorState =>\n    dispatch({ type: EDITOR_CHANGE, payload: { editorState } })\n  )\n\n  return (\n    <Editor\n      editorState={editorState}\n      plugins={plugins}\n      onChange={onChange}\n      blockStyleFn={blockStyleFn}\n    />\n  )\n}\n\nexport default MyEditor\n","import React from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { useDispatch, useGlobalState } from '../Provider'\nimport { GITHUB_SET } from '../actions'\n\nconst FormItem = Form.Item\n\nconst MyHeader = ({ className, form }) => {\n  const dispatch = useDispatch()\n  const github = useGlobalState('github')\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    form.validateFields((err, values) => {\n      if (!err) {\n        dispatch({ type: GITHUB_SET, payload: values })\n        console.log('Received values of form: ', values)\n      }\n    })\n  }\n\n  const { getFieldDecorator } = form\n\n  return (\n    <Form layout=\"inline\" onSubmit={handleSubmit} className={className}>\n      <FormItem>\n        {getFieldDecorator('url', {\n          initialValue: github.url,\n        })(<Input placeholder=\"api.github.com\" />)}\n      </FormItem>\n      <FormItem>\n        {getFieldDecorator('user', {\n          initialValue: github.user,\n        })(<Input placeholder=\"user\" />)}\n      </FormItem>\n      <FormItem>\n        {getFieldDecorator('token', {\n          initialValue: github.token,\n        })(<Input placeholder=\"token\" autoComplete=\"off\" />)}\n      </FormItem>\n      <FormItem>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Fetch Gists\n        </Button>\n      </FormItem>\n    </Form>\n  )\n}\n\nexport default Form.create()(MyHeader)\n","import React, { useEffect } from 'react'\nimport { Layout } from 'antd'\nimport Sidebar from './Siderbar'\nimport { useDispatch, useGlobalState } from '../Provider'\nimport { getGists } from '../services/github'\nimport { GISTS_SET } from '../actions'\nimport MyEditor from './MyEditor'\nimport MyHeader from './MyHeader'\nimport styles from './App.module.css'\n\nconst { Header, Content, Footer } = Layout\n\nconst loadGists = dispatch => async gh => {\n  const gists = await getGists(gh)\n  dispatch({ type: GISTS_SET, payload: { gists } })\n}\n\nconst App = () => {\n  const gh = useGlobalState('github')\n  const dispatch = useDispatch()\n\n  useEffect(\n    () => {\n      if (gh) {\n        loadGists(dispatch)(gh)\n      }\n    },\n    [gh]\n  )\n\n  return (\n    <Layout className={styles.layout}>\n      <Sidebar />\n      <Layout>\n        <Header className={styles.header}>\n          <MyHeader className={styles.headerContent} />\n        </Header>\n        <Content className={styles.content}>\n          <MyEditor />\n        </Content>\n        <Footer className={styles.footer}>\n          Guilst ❤️Created by{' '}\n          <a href=\"http://guilhermecvm.com\" target=\"_blank\">\n            @guilhermecvm\n          </a>\n        </Footer>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { Provider } from './Provider'\nimport App from './container/App'\n\nconst Root = () => (\n  <Provider>\n    <App />\n  </Provider>\n)\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Root from './Root'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"App_layout__Gmgy3\",\"header\":\"App_header__gwpv0\",\"headerContent\":\"App_headerContent__3-Kj6\",\"content\":\"App_content__1tRsq\",\"footer\":\"App_footer__1PHXo\"};","const getHeaders = gh => {\n  let headers = new Headers()\n  headers.append(\n    'Authorization',\n    'Basic ' + Buffer.from(gh.user + ':' + gh.token).toString('base64')\n  )\n  return headers\n}\n\nexport const getGists = async gh =>\n  fetch(`${gh.url}/users/${gh.user}/gists`, {\n    method: 'GET',\n    headers: getHeaders(gh),\n  })\n    .then(response => response.json())\n    .then(json =>\n      json.map(gist => ({\n        id: gist.id,\n        name: gist.description,\n        files: Object.values(gist.files),\n      }))\n    )\n\nexport const getGist = async (gh, id) =>\n  fetch(`${gh.url}/gists/${id}`, {\n    method: 'GET',\n    headers: getHeaders(gh),\n  })\n    .then(response => response.json())\n    .then(json => json.files)\n"],"sourceRoot":""}